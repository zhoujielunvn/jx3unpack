---------------------------------------------------------------------->
-- 脚本名称:	scripts/Include/HomeLandMap.lh
-- 更新时间:	2021/6/3 15:44:18
-- 更新用户:	qingfupei
-- 脚本说明:	
----------------------------------------------------------------------<

--是否是社区家园场景，不能加个人家园地图！
local HomeLandMap = {
	[455] = GetEditorString(16, 4548),--广陵邑
	[471] = GetEditorString(17, 1206),--枫叶泊・乐苑
	[486] = GetEditorString(17, 1207),--枫叶泊・天苑
	[462] = GetEditorString(18, 9732),--九寨沟・镜海
	[608] = GetEditorString(23, 1747),--个人家园_社区
}
local HomeLandNum = {
	[455] = 33,--广陵邑
	[471] = 15,--枫叶泊・乐苑
	[486] = 15,--枫叶泊・天苑
	[462] = 30,--九寨沟・镜海
	[608] = 7,--个人家园_社区
}
--地图类型定，1代表普通地图，2代表团购地图
local HomeMapType = {
	[455] = 1,
	[471] = 2,
	[486] = 2,
	[462] = 1,
	[608] = 1,
}
--家园中秋天灯登月生成地点(记得补一下九寨沟的)
HomeLandActPos = {
	[455] = {28617, 8550, 1057536, 192},
	[471] = {15656, 19773, 1058944, 126},
	[486] = {15656, 19773, 1058944, 126},
	[462] = {13754, 20950, 2417088, 165},
}
--家园声望商创建的位置（每次加地图需要维护）
local HomeLandReputation = {
	[455] = {28446, 8245, 1057536, 235},
	[471] = {15643, 19290, 1059008, 199},
	[486] = {15670, 19218, 1058944, 65},
	[462] = {27922, 51341, 2407744, 87},
}
--个人家园,有了程序接口以后无用了
local PersonalHomeland = {
	[565] = GetEditorString(22, 3660),--个人家园_广陵邑
}
	
function GetHomelandRepu(scene)
	local dwMapID = scene.dwMapID
	if not HomeLandReputation[dwMapID] then
		return false
	end
	return HomeLandReputation[dwMapID][1], HomeLandReputation[dwMapID][2], HomeLandReputation[dwMapID][3], HomeLandReputation[dwMapID][4]
end

local MgrHomeLand = GetHomelandMgr()

--是否是家园地图
function IsHomeMap(dwMapID)
	if HomeLandMap[dwMapID] then
		return true
	elseif PersonalHomeland[dwMapID] then
		return true
	end
	return false
end

--是否是社区家园地图
function IsHomeLandMap(dwMapID)
	if HomeLandMap[dwMapID] then
		return true
	end
	return false
end

--是否是个人家园地图
function IsPrivateHomeland(dwMapID)
	if PersonalHomeland[dwMapID] then
		return true
	end
	return false
end

-- 获取家园地图名
function GetHomeLandMapName(dwMapID)
	local szName = GetEditorString(20, 8955)
	if HomeLandMap[dwMapID] then
		szName = HomeLandMap[dwMapID]
	elseif PersonalHomeland[dwMapID] then
		szName = PersonalHomeland[dwMapID]
	end
	return szName
end

--获得家园地图的宅邸数量
function GetHomeLandNum(dwMapID)
	if not IsHomeLandMap(dwMapID) then
		return 0
	end
	return HomeLandNum[dwMapID]
end

--获得家园地图类型,1代表普通地图，2代表团购地图
function GetHomeMapType(dwMapID)
	if not IsHomeLandMap(dwMapID) then
		return 0
	end
	return HomeMapType[dwMapID]
end

--获得业主数量（非空户的数量）
function GetOwnerCount(dwMapID, nCopyIndex)
	local nCount = GetHomeLandNum(dwMapID)
	local nOwnerCount = 0
	for i = 1, nCount, 1 do
		local InfoLand = MgrHomeLand.GetHLLandInfo(dwMapID, nCopyIndex, i)
		if InfoLand.uOwnerID ~= "0" then
			nOwnerCount = nOwnerCount + 1
		end
	end
	return nOwnerCount
end

--获得业主列表（非空户的index集合）
function GetOwnerList(dwMapID, nCopyIndex)
	--print("GetOwnerList")
	local nCount = GetHomeLandNum(dwMapID)
	local tIndexList = {}
	for i = 1, nCount do
		local InfoLand = MgrHomeLand.GetHLLandInfo(dwMapID, nCopyIndex, i)
		if InfoLand.uOwnerID ~= "0" then
			tIndexList[#tIndexList + 1] = i
			--print(">>>>", i)
		end
	end
	return tIndexList
end

--随机挑选一位幸运业主的index，如果本小区住户≤3，那么空户index也随机
function GetRandOwnerIndex(dwMapID, nCopyIndex)
	local tIndexList = GetOwnerList(dwMapID, nCopyIndex)
	--for i = 1, #tIndexList do
	--print(i, tIndexList[i])
	--end
	if #tIndexList <= 3 then
		local nCount = GetHomeLandNum(dwMapID)
		local nRand = Random(1, nCount)
		--print("Random", nRand)
		return nRand
	else
		local nRand = Random(1, #tIndexList)
		--print("Random", tIndexList[nRand])
		return tIndexList[nRand]
	end
end

local tAirLightPosition = {
	[471] = {
		{13740, 17789, 1065117},
		{13751, 21916, 1065117},
		{15567, 23191, 1065117},
		{17961, 23382, 1065117},
		{15542, 15747, 1065117},
		{16540, 15667, 1065117},
		{18274, 16215, 1065117},
		{21505, 17691, 1065117},
		{20826, 21320, 1065117},
		{18924, 24095, 1065117},
		{11800, 8408, 1065117},
		{13209, 25362, 1065117},
		{10367, 19749, 1065117},
		{8540, 19766, 1065117},
		{6857, 19693, 1065117},
		{4689, 19791, 1065117},
		{3155, 19778, 1065117},
	},
	[486] = {
		{13740, 17789, 1065117},
		{13751, 21916, 1065117},
		{15567, 23191, 1065117},
		{17961, 23382, 1065117},
		{15542, 15747, 1065117},
		{16540, 15667, 1065117},
		{18274, 16215, 1065117},
		{21505, 17691, 1065117},
		{20826, 21320, 1065117},
		{18924, 24095, 1065117},
		{11800, 8408, 1065117},
		{13209, 25362, 1065117},
		{10367, 19749, 1065117},
		{8540, 19766, 1065117},
		{6857, 19693, 1065117},
		{4689, 19791, 1065117},
		{3155, 19778, 1065117},
	},
	[455] = {
		{29846, 13036, 1058240 + 7226},
		{29287, 15193, 1058176 + 7226},
		{26983, 15993, 1058432 + 7226},
		{26128, 13378, 1056896 + 7226},
		{25427, 7380, 1058688 + 7226},
		{21663, 6794, 1057792 + 7226},
		{18774, 6242, 1058176 + 7226},
		{16316, 5457, 1061504 + 7226},
		{14156, 6041, 1066368 + 7226},
		{12098, 4286, 1069952 + 7226},
		{9362, 4309, 1069888 + 7226},
		{6335, 3341, 1070016 + 7226},
		{5253, 5852, 1072384 + 7226},
		{6920, 20848, 1086400 + 7226},
		{9107, 25490, 1088832 + 7226},
		{13132, 26527, 1095936 + 7226},
		{13128, 29375, 1097984 + 7226},
		{19096, 27258, 1070080 + 7226},
	},
	[462] = {
		{15969, 19610, 2423962},
		{15004, 19371, 2423468},
		{14345, 19663, 2424412},
		{14231, 19215, 2424505},
		{14094, 18535, 2435766},
		{13660, 17950, 2437859},
		{13040, 18319, 2431966},
		{13056, 18867, 2428433},
		{13021, 19550, 2429088},
		{13221, 20058, 2462253},
		{13226, 20571, 2452095},
		{13371, 20694, 2439196},
		{13150, 21724, 2439486},
		{13225, 21234, 2434038},
		{13498, 21829, 2430280},	
		{13569, 21778, 2436484},
		{13574, 21612, 2440900},	
		{13997, 21486, 2432358},
		{14254, 21471, 2444181},
		{13255, 21615, 2454984},
	},
}
local tWaterLightPosition = {
	[471] = {
		{12642, 8674, 1053248},
		{12375, 8034, 1053248},
		{11509, 8938, 1053248},
		{11093, 8259, 1053248},
		{11995, 8807, 1053248},
		{12116, 9950, 1053248},
		{12685, 8663, 1053248},
		{11908, 7712, 1053248},
		{13088, 18142, 1053248},
		{13706, 17673, 1053248},
		{14538, 17281, 1053248},
		{15499, 16872, 1053248},
		{16568, 16711, 1053248},
		{17866, 16845, 1053248},
		{19308, 17679, 1053248},
		{20047, 19274, 1053248},
		{20058, 19986, 1053248},
		{19871, 20756, 1053248},
		{19526, 21567, 1053248},
		{18817, 22265, 1053248},
		{18046, 22664, 1053248},
		{17515, 23585, 1053248},
		{17380, 24703, 1053248},
		{18204, 24703, 1053248},
		{19113, 24332, 1053248},
		{14119, 25396, 1053248},
		{13439, 25480, 1053248},
		{12725, 24874, 1053248},
		{12141, 23104, 1053248},
		{12120, 22416, 1053248},
		{13370, 21928, 1053248},
		{14082, 22005, 1053248},
		{14793, 22285, 1053248},
		{15426, 22683, 1053248},
		{16307, 22985, 1053248},
		{17138, 23039, 1053248},
		{18148, 23825, 1053248},
		{14438, 24005, 1053248},
		{13573, 23100, 1053248},
		{2370, 5859, 1053183},
		{2495, 5490, 1053183},
		{2718, 4940, 1053183},
		{2894, 4497, 1053183},
		{3110, 3984, 1053183},
		{3331, 3294, 1053312},
		{3184, 1622, 1053127},
		{1077, 11796, 1053178},
		{1157, 12807, 1053178},
		{1512, 13621, 1053178},
		{1524, 14214, 1053178},
		{1475, 14973, 1053178},
		{1262, 15532, 1053178},
		{1201, 16501, 1053178},
		{1354, 17291, 1053178},
		{1712, 18227, 1053178},
		{2013, 19137, 1053178},
		{2092, 20176, 1053178},
		{2003, 20956, 1053178},
		{1639, 21402, 1053178},
		{1664, 22426, 1053178},
		{1105, 23508, 1053178},
		{601, 24184, 1053178},
		{540, 25126, 1053178},
		{334, 26044, 1053178},
		{380, 26935, 1053178},
		{565, 27705, 1053178},
		{401, 28440, 1053178},
		{546, 29470, 1053178},
		{856, 30550, 1053178},
		{743, 31420, 1053178},
		{1037, 32047, 1053178},

	},
	[486] = {
		{12642, 8674, 1053248},
		{12375, 8034, 1053248},
		{11509, 8938, 1053248},
		{11093, 8259, 1053248},
		{11995, 8807, 1053248},
		{12116, 9950, 1053248},
		{12685, 8663, 1053248},
		{11908, 7712, 1053248},
		{13088, 18142, 1053248},
		{13706, 17673, 1053248},
		{14538, 17281, 1053248},
		{15499, 16872, 1053248},
		{16568, 16711, 1053248},
		{17866, 16845, 1053248},
		{19308, 17679, 1053248},
		{20047, 19274, 1053248},
		{20058, 19986, 1053248},
		{19871, 20756, 1053248},
		{19526, 21567, 1053248},
		{18817, 22265, 1053248},
		{18046, 22664, 1053248},
		{17515, 23585, 1053248},
		{17380, 24703, 1053248},
		{18204, 24703, 1053248},
		{19113, 24332, 1053248},
		{14119, 25396, 1053248},
		{13439, 25480, 1053248},
		{12725, 24874, 1053248},
		{12141, 23104, 1053248},
		{12120, 22416, 1053248},
		{13370, 21928, 1053248},
		{14082, 22005, 1053248},
		{14793, 22285, 1053248},
		{15426, 22683, 1053248},
		{16307, 22985, 1053248},
		{17138, 23039, 1053248},
		{18148, 23825, 1053248},
		{14438, 24005, 1053248},
		{13573, 23100, 1053248},
		{2370, 5859, 1053183},
		{2495, 5490, 1053183},
		{2718, 4940, 1053183},
		{2894, 4497, 1053183},
		{3110, 3984, 1053183},
		{3331, 3294, 1053312},
		{3184, 1622, 1053127},
		{1077, 11796, 1053178},
		{1157, 12807, 1053178},
		{1512, 13621, 1053178},
		{1524, 14214, 1053178},
		{1475, 14973, 1053178},
		{1262, 15532, 1053178},
		{1201, 16501, 1053178},
		{1354, 17291, 1053178},
		{1712, 18227, 1053178},
		{2013, 19137, 1053178},
		{2092, 20176, 1053178},
		{2003, 20956, 1053178},
		{1639, 21402, 1053178},
		{1664, 22426, 1053178},
		{1105, 23508, 1053178},
		{601, 24184, 1053178},
		{540, 25126, 1053178},
		{334, 26044, 1053178},
		{380, 26935, 1053178},
		{565, 27705, 1053178},
		{401, 28440, 1053178},
		{546, 29470, 1053178},
		{856, 30550, 1053178},
		{743, 31420, 1053178},
		{1037, 32047, 1053178},

	},
	[455] = {
		{28884, 11059, 1056239},
		{28621, 11292, 1056239},
		{28919, 11625, 1056239},
		{28886, 12159, 1056239},
		{28826, 12826, 1056239},
		{29134, 13481, 1056239},
		{28620, 13589, 1056239},
		{27890, 13554, 1056239},
		{27598, 13908, 1056239},
		{27202, 14017, 1056239},
		{27059, 13756, 1056239},
		{26626, 13731, 1056239},
		{26220, 13962, 1056239},
		{25982, 13853, 1056239},
		{25302, 13391, 1056239},
		{24636, 13052, 1056239},
		{24213, 12423, 1056239},
		{23752, 12105, 1056239},
		{23327, 11918, 1056239},
		{22812, 11704, 1056239},
		{22109, 11438, 1056239},
		{20373, 10890, 1056239},
		{19686, 10701, 1056239},
		{18861, 10504, 1056239},
		{18486, 10387, 1056239},
		{17136, 9539, 1056320},
		{16770, 9207, 1056320},
		{16302, 7843, 1056336},
		{16003, 7960, 1056336},
		{15216, 8450, 1056640},
		{21009, 803, 1055504},
		{21474, 200, 1055504},
		{21174, 6, 1055504},
		{27232, 1034, 1055504},
		{27491, 1519, 1055504},
		{27765, 2181, 1055504},
		{28227, 2700, 1055504},
		{28782, 3210, 1055504},
		{29270, 2843, 1055504},
		{29316, 2183, 1055504},
		{28939, 1598, 1055504},
		{28419, 801, 1055504},
	},
	[462] = {
		{15578, 21640, 2415965},
		{14558, 21771, 2415961},
		{16020, 20001, 2415953},
		{14517, 18922, 2415674},
		{10287, 18191, 2415873},
		{8255, 20270, 2415942},
		{7823, 20919, 2416104},
		{7537, 23318, 2415977},
		{4660, 22437, 2416046},
		{3390, 21735, 2416028},
		{560, 19099, 2415944},
		{2216, 21496, 2415885},
		{4114, 22915, 2415918},
		{6376, 24047, 2415985},
		{6865, 25784, 2415970},
		{3391, 19086, 2416063},
		{3642, 15632, 2415652},
		{6848, 20355, 2415995},
		{8243, 22574, 2416020},
		{5494, 23064, 2415828},
		{2258, 7438, 2417363},
		{2799, 33646, 2406131},
		{258, 32032, 2406198},
		{518, 31966, 2406138},
		{2762, 34861, 2406100},
		{3258, 38781, 2406181},
		{2835, 41318, 2406092},
		{3821, 44974, 2406145}, 
		{7376, 45773, 2406148},
		{9618, 46794, 2406162},
		{11565, 47885, 2406174},
		{12173, 48477, 2406183},
		{14170, 48399, 2406240},
		{15424, 49194, 2406302},
		{17354, 51518, 2406173},
		{21295, 51055, 2406161},
		{24192, 55357, 2405918},
		{10826, 57453, 2406181},
		{7884, 53756, 2406132},
		{40717, 50798, 2405919},
		{35448, 54173, 2405928},
		{37539, 53725, 2406179},
		{39686, 53131, 2406154},
		{42942, 50268, 2406055},
		{44200, 48836, 2406199},
		{45881, 47051, 2405520},
		{50063, 47033, 2406060},
		{53964, 45381, 2405520},
		{57134, 45085, 2405779},
		{58125, 43605, 2406188},
		{61617, 41158, 2406149},
		{64966, 40363, 2406118},
	},
}

local EightQueenAnswer = {6, 2, 7, 1, 4, 8, 5, 3}
local radius = 5
local maxExitTimeFrame = 60 * 60 * 16 * 2
function CreateMidAutumnLight(scene)
	local dwMapId = scene.dwMapID
	for k, v in pairs(tAirLightPosition[dwMapId]) do
		for i = 1, 8, 1 do
			local nRandNum = Random(128)
			local npcLight = scene.CreateNpc(101507, v[1] - ((i - 4) * 64 + 32) * radius, v[2] - ((EightQueenAnswer[i] - 4) * 64 + 32) * radius, v[3] + (nRandNum * 160), - 1, maxExitTimeFrame)
			npcLight.SetDisappearFrames(maxExitTimeFrame)
			npcLight.AddBuff(0, 99, 2252, 2)
			npcLight.AddBuff(0, 99, 6219, 1)
			npcLight.SetPosition(v[1] - ((i - 4) * 64 + 32) * radius, v[2] - ((EightQueenAnswer[i] - 4) * 64 + 32) * radius, v[3] + (nRandNum * 160))
		end
	end
end

function CreateMidAutumnNPC(scene)
	local dwMapID = scene.dwMapID
	for k, v in pairs(tWaterLightPosition[dwMapID]) do
		local npcLight = scene.CreateNpc(101017, v[1], v[2], v[3], - 1, - 1)
		npcLight.SetCustomUnsigned1(20, 1)
		npcLight.SetCustomUnsigned4(21, 0)
		npcLight.AddBuff(0, 99, 2252, 2)
		npcLight.AddBuff(0, 99, 6219, 1)
		npcLight.SetPosition(v[1], v[2], v[3])
	end
	scene.CreateNpc(102035, HomeLandActPos[dwMapID][1], HomeLandActPos[dwMapID][2], HomeLandActPos[dwMapID][3], HomeLandActPos[dwMapID][4], - 1, "LiLi")
	scene.CreateNpc(100953, HomeLandActPos[dwMapID][1], HomeLandActPos[dwMapID][2], HomeLandActPos[dwMapID][3], HomeLandActPos[dwMapID][4], - 1, "ZhongQiuHuaDengZK")
end